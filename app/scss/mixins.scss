@mixin rem-calc ($property, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';

	@for $i from 1 through $max {
		$value: nth($values, $i);

		@if type-of($value) == "string" or type-of($value) == "color"  {
			$pxValues: #{$pxValues + " " + $value};
		} @else {
			$pxValues: #{$pxValues + " " + $value}px;
		}
	}

	@for $i from 1 through $max {
		$value: nth($values, $i);

		@if type-of($value) == "string" or type-of($value) == "color" {
			$remValues: #{$remValues + " " + $value};
		} @else {
			$remValues: #{$remValues + " " + $value / $base-px}rem;
		}
	}

	#{$property}: $pxValues;
	#{$property}: $remValues;
}

@mixin clearfix {
	&:before, &:after { content: " "; display: table; }
	&:after { clear: both; }
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin gradient($top, $bottom) {
	background: $top; /* Old browsers */
	background: -moz-linear-gradient(top, $top 0%,  $bottom 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $top), color-stop(100%, $bottom)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top, $top 0%, $bottom 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, $top 0%, $bottom 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top, $top 0%, $bottom 100%); /* IE10+ */
	background: linear-gradient(to bottom, $top 0%, $bottom 100%); /* W3C */
}

@mixin translate3($x, $y, $z) {
	-webkit-transform: translate3d(#{$x}, #{$y}, #{$z});
	-ms-transform: translate3d(#{$x}, #{$y}, #{$z});
	transform: translate3d(#{$x}, #{$y}, #{$z});
}

// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
	content: "";
	display: block;
	width: 0;
	height: 0;
	border: inset #{$triangle-size}px;
	@if ($triangle-direction == top) {
		border-color: $triangle-color transparent transparent transparent;
		border-top-style: solid;
	}
	@if ($triangle-direction == bottom) {
		border-color: transparent transparent $triangle-color transparent;
		border-bottom-style: solid;
	}
	@if ($triangle-direction == left) {
		border-color: transparent transparent transparent $triangle-color;
		border-left-style: solid;
	}
	@if ($triangle-direction == right) {
		border-color: transparent $triangle-color transparent transparent;
		border-right-style: solid;
	}
}
