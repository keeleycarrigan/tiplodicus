$row-width: $max-content-width + $column-gutter;

@function grid-calc($colNumber, $totalColumns) {
	@return percentage(($colNumber / $totalColumns));
}

@function block-calc($rowNumber, $colNumber) {
	@return percentage($rowNumber / $colNumber);
}

// For creating container, nested, and collapsed rows.
//
//
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
@mixin grid-row($behavior: false) {

	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest {
		width: auto;
		@include rem-calc(margin-#{$default-float}, -($column-gutter / 2));
		@include rem-calc(margin-#{$opposite-direction}, -($column-gutter / 2));
		margin-top: 0;
		margin-bottom: 0;
		max-width: none;
	}

	// use @include grid-row(collapse); to collapsed a container row margins
	@else if $behavior == collapse {
		width: 100%;
		margin: 0;
		@include rem-calc(max-width, $row-width);
	}

	// use @include grid-row(nest-collapse); to collapse outer margins on a nested row
	@else if $behavior == nest-collapse {
		width: auto;
		margin: 0;
		max-width: none;
	}

	// use @include grid-row; to use a container row
	@else {
		width: 100%;
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		margin-top: 0;
		margin-bottom: 0;
		@include rem-calc(max-width, $row-width);
	}

	// Clearfix for all rows
	@include clearfix();
}

//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin grid-column(
	$columns:false,
	$last-column:false,
	$center:false,
	$offset:false,
	$push:false,
	$pull:false,
	$collapse:false,
	$float:true,
	$position:false) {

	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull {
		position: relative;
	}

	// If collapsed, get rid of gutter padding
	@if $collapse {
		padding-left: 0;
		padding-right: 0;
	}

	// Gutter padding whenever a column isn't set to collapse
	// (use $collapse:null to do nothing)
	@else if $collapse == false {
		@include rem-calc(padding-left, ($column-gutter / 2));
		@include rem-calc(padding-right, ($column-gutter / 2));
	}

	// If a column number is given, calculate width
	@if $columns {
		width: grid-calc($columns, $total-columns);
	}

	// Source Ordering, adds left/right depending on which you use.
	@if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
	@if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }

	@if $float {
		@if $float == left or $float == true { float: $default-float; }
		@else if $float == right { float: $opposite-direction; }
		@else { float: none; }
	}

	// If centered, get rid of float and add appropriate margins
	@if $center {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		float: none;
	}

	// If offset, calculate appropriate margins
	@if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }

}

@mixin grid-html-classes($size) {

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-push-col-#{$i} {
			@include grid-column($push:$i, $collapse:null, $float:false);
		}
		.#{$size}-pull-col-#{$i} {
			@include grid-column($pull:$i, $collapse:null, $float:false);
		}

		@if $include-block-grid {
			.#{$size}-push-block-#{$i} {
				@include grid-column($push:$i, $collapse:null, $float:false);
			}
			.#{$size}-pull-block-#{$i} {
				@include grid-column($pull:$i, $collapse:null, $float:false);
			}
		}
	}

	@for $i from 1 through $total-columns {
		.#{$size}-col-#{$i} { @include grid-column($columns: $i, $collapse: null, $float: left); }

		@if $include-block-grid {
			@for $j from 1 through $total-columns {
				.#{$size}-block-#{$i}-#{$j} {
					width: grid-calc($i, $total-columns);

					&:before {
						padding-top: block-calc($j, $i);
					}
				}
			}
		}
	}

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-offset-col-#{$i} { @include grid-column($offset: $i, $collapse: null, $float: false); }
		.#{$size}-center-col-#{$i} { @include grid-column($columns: $i, $center: true, $collapse: null, $float: false); }

		@if $include-block-grid {
			.#{$size}-offset-block-#{$i} { @include grid-column($offset: $i, $collapse: null, $float: false); }
			.#{$size}-center-block-#{$i} { @include grid-column($columns: $i, $center: true, $collapse: null, $float: false); }

			.#{$size}-offset-top-#{$i} {
				padding-top: grid-calc($i, $total-columns);
			}

			@for $j from 0 through $total-columns - 1 {
				.#{$size}-offset-top-#{$i}-#{$j} {
					.wrap {
						margin-top: block-calc($j, $i);
					}
				}
			}
		}
	}

	.#{$size}-reset-order {
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		left: auto;
		right: auto;
		float: $default-float;
	}

	.show-#{$size}-up {
		display: block;
	}

	.hide-#{$size}-up {
		display: none;
	}
}

*,
*:before,
*:after {
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

.row {
	@include grid-row;

	&.collapse {
		> [class*="-col"] { @include grid-column($collapse:true, $float:false); }

		.row {margin-left:0; margin-right:0;}
		}

		.row { @include grid-row($behavior:nest);
		&.collapse { @include grid-row($behavior:nest-collapse); }
	}
}

[class*="-col"] { @include grid-column($columns:$total-columns); }

[class*="-col"].align-right { float: $opposite-direction; }

[class*="-block"] {
	width: 100%;
	float: left;
	position: relative;

	&:before {
		content: "";
		padding-top: 100%;
		display: block;
	}

	.wrap {
		height: 100%;
		width: 100%;
		@include rem-calc(padding, 5);
		position: absolute;
		left: 0;
		top: 0;
	}

	.content {
		height: 100%;
		width: 100%;
		overflow: hidden;
	}

	[class*="-col"] {
		height: 100%;
	}

}

@media #{$small} {
	@include grid-html-classes($size:sm);
}

@media #{$small-only} {
	.hide-sm {
		display: none;
	}
}

@media #{$medium} {
	@include grid-html-classes($size:md);
}

@media #{$medium-only} {
	.hide-md {
		display: none;
	}
}

@media #{$large} {
	@include grid-html-classes($size:lg);
}

@media #{$large-only} {
	.hide-lg {
		display: none;
	}
}

@media #{$xlarge} {
	@include grid-html-classes($size:xl);

	.hide-xl {
		display: none;
	}
}
